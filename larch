#!/usr/bin/ruby
HOST="larch" #change this to the name of the server you want to connect to
             #if you do, better rename this program

#if invoked as an alias, name of alias is program to invoke on server
program=File.basename($0)
ARGV.unshift program unless program==HOST

#quote all words in cmdline, cause ssh doesn't do it
#this is bash quoting semantics. might not work with zsh/csh/ksh/etc
ARGV.map!{|w| "'#{word.gsub("'","'\\\\''")}'" }

#make sure user's env var settings on server are available
#at least, we hope he put them into .bash_profile, not .bashrc
#bash specific
ARGV.unshift("source", "~/.bash_profile", ";") unless ARGV.empty?

#workaround for a ????ssh bug????
if STDIN.tty? and !STDOUT.tty?
  STDIN.reopen cat=IO.popen("cat","r")
end

#-e none disables esc char... so now ~ works again
ssh_args=["-e", "none", ENV['USER']+"@"+HOST]
ssh_args.unshift("-t", "-t") if STDIN.tty? #force ttyness
ssh_args.unshift("-q", "-q") unless ARGV.empty? #force quietude

system "sshh", *ssh_args+ARGV
Process.kill "KILL",cat.pid if cat
